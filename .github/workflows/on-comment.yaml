# https://docs.github.com/en/rest/reactions#create-reaction-for-an-issue-comment
# https://octokit.github.io/rest.js/v19#reactions
# https://github.com/actions/github-script

name: Comments for CI/CD Pipeline

on:
  issue_comment:
    types:
      - 'created'
  workflow_dispatch:

jobs:
  ci-cd-comment:
    if: ${{ github.event.issue.state == 'open' && github.event.issue.pull_request }}
    name: Parse comment
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [16]
        os: [ubuntu-latest]

    steps:
      - uses: rhiokim/split-by@master
        id: comment
        with:
          string: ${{ github.event.comment.body }}
          split-by: ' '

      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: 'Checkout issue branch'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: hub pr checkout ${{ github.event.issue.number }}

      - name: Build ${{ steps.comment.outputs._1 }}
        if: steps.comment.outputs._0 == '/build'
        run: |
          echo ${{ steps.comment.outputs._0 }}
          echo ${{ steps.comment.outputs._1 }}
          echo ${{ steps.comment.outputs._2 }}

      - name: Get PR SHA
        id: sha
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const { owner, repo, number } = context.issue;
            const pr = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: number,
            });

            return pr.data.head.sha

      - name: Reaction
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.issue;
            const reaction = await github.rest.reactions.createForIssueComment({
              owner,
              repo,
              comment_id: ${{ github.event.comment.id }},
              content: 'rocket',
            })

      # - name: Create deploy ${{ steps.comment.outputs._2 }}-${{ steps.comment.outputs._1 }}
      #   if: steps.comment.outputs._0 == '/deploy'
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       const { owner, repo, number } = context.issue;
      #       const tag = await github.rest.git.createTag({
      #         owner,
      #         repo,
      #         tag: 'deploy/${{ steps.comment.outputs._1 }}/${{ steps.comment.outputs._2 }}',
      #         message: `Deploy ${{ steps.comment.outputs._2 }} to ${{ steps.comment.outputs._1 }} #${number}`,
      #         object: '${{ steps.sha.outputs.result }}',
      #         type: 'commit',
      #         tagger: {
      #           name: '${{ github.actor }}',
      #           email: '${{ github.actor }}@users.noreply.github.com'
      #         },
      #       })

      - name: Create deploy tag
        if: steps.comment.outputs._0 == '/deploy'
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

          git tag -a "deploy/${{ steps.comment.outputs._1 }}/${{ steps.comment.outputs._2 }}" -m "Deploy ${{ steps.comment.outputs._2 }} to ${{ steps.comment.outputs._1 }} #${number}"
          git push origin "deploy/${{ steps.comment.outputs._1 }}/${{ steps.comment.outputs._2 }}" --force

      # - name: Create ref
      #   if: steps.comment.outputs._0 == '/deploy'
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       const { owner, repo, number } = context.issue;
      #       const tag = await github.rest.git.createRef({
      #         owner,
      #         repo,
      #         ref: 'refs/tags/deploy/${{ steps.comment.outputs._1 }}/${{ steps.comment.outputs._2 }}',
      #         sha: '${{ steps.sha.outputs.result }}',
      #       })

      # - name: Update ref
      #   if: steps.comment.outputs._0 == '/deploy'
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       const { owner, repo, number } = context.issue;
      #       const tag = await github.rest.git.updateRef({
      #         owner,
      #         repo,
      #         ref: 'refs/tags/deploy/${{ steps.comment.outputs._1 }}/${{ steps.comment.outputs._2 }}',
      #         sha: '${{ steps.sha.outputs.result }}',
      #       })

      - run: |
          echo "comment sha: ${{ steps.sha.outputs.result }}"
